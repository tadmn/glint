
namespace tb {

graph FanOut(int numOut) {
    input stream float in;
    output stream float<numOut> out;
    connection float<numOut>(in) -> out;
}

graph AveragedSum(int numIn) {
    input stream float<numIn> in;
    output stream float out;

    let gain = 1.f / sqrt(float(numIn));

    float averagedSum(float<numIn> a) {
        return sum(a) * gain;
    }

    connection averagedSum(in) -> out;
}

processor HouseholderMatrixMixer(int size) {
    input stream float<size> in;
    output stream float<size> out;

    let normFactor = -2.f / float(size);

    void main() {
        loop {
            var v = in;

            float sum;
            for (clamp<size> i)
                sum += v[i];

            sum *= normFactor;
            
            for (clamp<size> i)
                v[i] += sum;

            out <- v;

            advance();
        }
    }
}

processor HadamardMatrixMixer(int size) {
    input stream float<size> in;
    output stream float<size> out;

    let normFactor = sqrt(1.f / float(size));

    void main() {
        loop {
            var data = in;
            for (int blockSize = 2; blockSize <= size; blockSize *= 2) {
                let halfBlock = blockSize / 2;
                for (int blockStart = 0; blockStart < size; blockStart += blockSize) {
                    for (int i = 0; i < halfBlock; ++i) {
                        let a = data.at(blockStart + i);
                        let b = data.at(blockStart + i + halfBlock);
                        data.at(blockStart + i) = (a + b);
                        data.at(blockStart + i + halfBlock) = (a - b);
                    }
                }
            }

            for (clamp<size> c)
                data[c] *= normFactor;

            out <- data;

            advance();
        }
    }
}

namespace delay(int maxDelay) {

struct Delay {
    void setDelay(int size) {
        this.write = this.read + wrap<maxDelay>(size);
    }

    float process(float in) {
        let v = this.buffer[this.read++];
        this.buffer[this.write++] = in;
        return v;
    }

    wrap<maxDelay> read;
    wrap<maxDelay> write;
    float[maxDelay] buffer;
}

}

}

namespace glint {

enum Step { diffusion, feedback }

processor MultiChannelDelay(Step step, int numChannels, float maxDelay_ms) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    input event float delay_ms;

    let maxDelay = int(maxDelay_ms * 0.001 * processor.frequency);

    tb::delay(maxDelay)::Delay[numChannels] delays;

    event delay_ms(float d) {
        setDelay(d);
    }

    void setDelay(float delay_ms) {
        let delay = int(delay_ms * 0.001 * processor.frequency);
        if (step == Step::diffusion) {
            std::random::RNG rng;
            rng.seed(processor.id);
            for (clamp<numChannels> c) {
                let min = delay * c / numChannels;
                let max = delay * (c + 1) / numChannels;
                delays[c].setDelay(int(min + rng.getUnipolar() * (max - min)));
            }
        } else if (step == Step::feedback) {
            for (clamp<numChannels> c) {
                let r = c * 1.f / numChannels;
                delays[c].setDelay(int(pow(2.f, r) * delay));
            }
        }
    }

    void main() {
        loop {
            float<numChannels> v;
            for (clamp<numChannels> c)
                v[c] = delays[c].process(in[c]);

            out <- v;
            advance();
        }
    }
}

processor Invert(int numChannels) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    float[numChannels] gains;

    void init() {
        std::random::RNG rng;
        rng.seed(processor.id);
        for (clamp<numChannels> c)
            gains[c] = rng.getUnipolar() > 0.5f ? 1.f : -1.f;
    }

    void main() {
        loop {
            float<numChannels> v;
            for (clamp<numChannels> c)
                v[c] = in[c] * gains[c];

            out <- v;
            advance();
        }
    }
}

graph Diffuser(int numChannels, float maxDiffuserDelay) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    input event float delay_ms;

    node {
        delay = MultiChannelDelay(Step::diffusion, numChannels, maxDiffuserDelay);
        invert = Invert(numChannels);
        matrix = tb::HadamardMatrixMixer(numChannels);
    }

    connection {
        delay_ms -> delay.delay_ms;
        in -> delay.in;
        delay.out -> matrix -> invert -> out;
    }
}

graph DiffuserChain(int numChannels, float maxDelay_ms) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    input event float delay_ms;

    node {
        d1 = Diffuser(numChannels, maxDelay_ms);
        d2 = Diffuser(numChannels, maxDelay_ms);
        d3 = Diffuser(numChannels, maxDelay_ms);
        d4 = Diffuser(numChannels, maxDelay_ms);
    }

    connection {
        delay_ms -> d1.delay_ms;
        delay_ms -> d2.delay_ms;
        delay_ms -> d3.delay_ms;
        delay_ms -> d4.delay_ms;

        in -> d1.in;
        d1.out -> d2.in;
        d2.out -> d3.in;
        d3.out -> d4.in;
        d4.out -> out;
    }
}

graph FeedbackChain(int numChannels, float maxDelay_ms) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    input event float delay_ms;
    input event float feedbackGain;
    input event float hiCut_Hz;
    input event float loCut_Hz;

    namespace filters = std::filters(float<numChannels>)::tpt::onepole;

    node {
        delay = MultiChannelDelay(Step::feedback, numChannels, maxDelay_ms);
        matrix = tb::HouseholderMatrixMixer(numChannels);
        gain = std::smoothing::SmoothedValueStream;
        hiCut = filters::Processor(filters::Mode::lowPass);
        loCut = filters::Processor(filters::Mode::highpass);
    }

    connection {
        delay_ms -> delay.delay_ms;
        hiCut_Hz -> hiCut.frequency;
        loCut_Hz -> loCut.frequency;
        feedbackGain -> gain.in;
        in -> delay.in;
        (delay.out * gain.out) -> [1] -> loCut.in;
        loCut.out -> hiCut.in;
        hiCut.out -> matrix -> delay.in;
        delay.out -> out;
    }
}

graph Reverb(float maxDelay_ms) {
    input stream float in;
    output stream float out;

    input event float delay_ms;
    input event float feedbackGain;
    input event float hiCut_Hz;
    input event float loCut_Hz;

    let numChannels = 8;

    node {
        fanOut = tb::FanOut(numChannels);
        diffuser = DiffuserChain(numChannels, maxDelay_ms);
        feedback = FeedbackChain(numChannels, maxDelay_ms);
        sum = tb::AveragedSum(numChannels);
    }

    connection {
        delay_ms -> diffuser.delay_ms;
        delay_ms -> feedback.delay_ms;

        hiCut_Hz -> feedback.hiCut_Hz;
        loCut_Hz -> feedback.loCut_Hz;

        feedbackGain -> feedback.feedbackGain;
        in -> fanOut -> diffuser.in;
        diffuser.out -> feedback.in;
        feedback.out -> sum -> out;
    }
}

graph glint [[ main ]] {
    input stream float<2> in;
    output stream float<2> out;

    input event float delay_ms [[ name: "Delay", unit: "ms", min: 5, max: kMaxDelay_ms, init: 28 ]];
    input event float feedbackGain [[ name: "Feedback", min: 0.5, max: 0.93, init: 0.82 ]];
    input event float feedbackLoCut_Hz [[ name: "FB Lo Cut", unit: "Hz", min: 10, max: 1000, init: 100 ]];
    input event float feedbackHiCut_Hz [[ name: "FB Hi Cut", unit: "Hz", min: 300, max: 20000, init: 2000 ]];
    input event float loCut_Hz [[ name: "Lo Cut", unit: "Hz", min: 10, max: 1000, init: 70 ]];
    input event float hiCut_Hz [[ name: "Hi Cut", unit: "Hz", min: 300, max: 20000, init: 3000 ]];
    input value float mix_pct [[ name: "Mix", unit: "%", min: 0, max: 100, init: 20 ]];
    input gain.volume;

    let kMaxDelay_ms = 150.f;

    namespace filters = std::filters(float<2>)::tpt::onepole;

    node {
        reverb = Reverb(kMaxDelay_ms)[2];
        reverbGain = std::levels::ConstantGain(float<2>, 0.6f);
        hiCut = filters::Processor(filters::Mode::lowPass);
        loCut = filters::Processor(filters::Mode::highpass);
        mix = std::mixers::Interpolator(float<2>, 100.f);
        gain = std::levels::SmoothedGain(float<2>);
    }

    connection {
        delay_ms -> reverb.delay_ms;
        feedbackLoCut_Hz -> reverb.loCut_Hz;
        feedbackHiCut_Hz -> reverb.hiCut_Hz;
        feedbackGain -> reverb.feedbackGain;
        loCut_Hz -> loCut.frequency;
        hiCut_Hz -> hiCut.frequency;
        mix_pct -> mix.mix;

        in -> mix.in1;

        float(in[0]) -> reverb[0].in;
        float(in[1]) -> reverb[1].in;

        float<2>(reverb[0].out, reverb[1].out) -> reverbGain -> loCut.in;
        loCut.out -> hiCut.in;
        hiCut.out -> mix.in2;
        
        mix.out -> gain.in;
        gain.out -> out;
    }
}

}