
namespace tb {

graph SmoothedGain(int numChannels) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    input smoothedGainParameter.volume;

    node smoothedGainParameter = std::levels::SmoothedGainParameter;
    
    connection in * smoothedGainParameter.gain -> out;
}

graph StereoMerge {
    input stream float inLeft;
    input stream float inRight;

    output stream float<2> out;

    connection float<2>(inLeft, inRight) -> out;
}

graph FanOut(int numOut) {
    input stream float in;
    output stream float<numOut> out;
    connection float<numOut>(in) -> out;
}

graph FanIn(int numIn) {
    input stream float<numIn> in;
    output stream float out;
    connection sum(in) -> out;
}

}

namespace glint {

let kRngSeed = 1618;

processor MultiChannelDelay(int numChannels, float maxDelayMilliSeconds) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    input event float delayIn;

    let maxDelay = int(maxDelayMilliSeconds * 0.001 * processor.frequency);

    struct Delay {
        void setDelay(int size) {
            this.smoother.setTarget(float(size), int(0.1 * processor.frequency));
        }

        float process(float in) {
            let delayAmount = roundToInt(this.smoother.getNext());
            let readIndex = wrap<maxDelay>(this.write + delayAmount);
            let r = this.buffer[readIndex];
            this.buffer[this.write++] = in;
            return r;
        }

        wrap<maxDelay> write;
        float[maxDelay] buffer;
        std::smoothing::SmoothedValue smoother;
    }

    Delay[numChannels] delays;

    event delayIn(float d) {
        updateDelays(d);
    }

    void updateDelays(float maxDelayMilliSeconds) {
        std::random::RNG rng;
        rng.seed(kRngSeed);
        let maxDelaySamples = maxDelayMilliSeconds * 0.001f * processor.frequency;
        for (clamp<numChannels> c) {
            let min = maxDelaySamples * c / numChannels;
            let max = maxDelaySamples * (c + 1) / numChannels;
            let delaySize = int(min + rng.getUnipolar() * (max - min));
            delays[c].setDelay(delaySize);
        }
    }

    void main() {
        loop {
            float<numChannels> v;
            for (clamp<numChannels> c)
                v[c] = float(delays[c].process(in[c]));

            out <- v;
            advance();
        }
    }
}

processor InvertPolarities(int numChannels) {
    input stream float<numChannels> in;
    output stream float<numChannels> out;

    float<numChannels> gains;

    void init() {
        std::random::RNG rng;
        rng.seed(kRngSeed);
        for (clamp<numChannels> i)
            gains[i] = rng.getUnipolar() > 0.5f ? 1.f : -1.f;
    }

    void main() {
        loop {
            let v = in * gains;
            out <- v;
            advance();
        }
    }
}

graph Diffuser(int numChannels, float maxDiffuserDelay) {
    input stream float in;
    output stream float out;

    input delay.delayIn;

    node {
        fanOut = tb::FanOut(numChannels);
        delay = MultiChannelDelay(numChannels, maxDiffuserDelay);
        invert = InvertPolarities(numChannels);
        fanIn = tb::FanIn(numChannels);
    }

    connection {
        in * (1.f / numChannels) -> fanOut -> delay.in;
        delay.out -> invert -> fanIn -> out;
    }
}

graph glint [[ main ]] {
    input stream float<2> in;
    output stream float<2> out;

    input gain.volume;

    input event float diffuserDelay
        [[ name: "Diffuser Delay", unit: "ms", min:  0, max: kMaxDiffuserDelay, init: 10 ]];

    let kMaxDiffuserDelay = 150;
    let kNumDiffuserChannels = 32;

    node {
        diffuserLeft = Diffuser(kNumDiffuserChannels, kMaxDiffuserDelay);
        diffuserRight = Diffuser(kNumDiffuserChannels, kMaxDiffuserDelay);
        stereoMerge = tb::StereoMerge;
        gain = tb::SmoothedGain(2);
    }

    connection {
        float(in[0]) -> diffuserLeft.in;
        float(in[1]) -> diffuserRight.in;
        diffuserLeft -> stereoMerge.inLeft;
        diffuserRight -> stereoMerge.inRight;
        stereoMerge.out -> gain.in;
        gain.out -> out;

        diffuserDelay -> diffuserLeft.delayIn;
        diffuserDelay -> diffuserRight.delayIn;
    }
}

}